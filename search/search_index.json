{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C#-Nachschlagewerk Theorie Arrays in C Arrays sind Sammlungen von Elementen eines bestimmten Typs, die \u00fcber einen Index abgerufen werden k\u00f6nnen. \u00dcbungsaufgabe Allgemein Arrays sind grundlegende Datenstrukturen in C# und dienen zur Speicherung von Sammlungen von Elementen. Hier sind einige ausf\u00fchrliche Stichpunkte, die das Konzept von Arrays in C# und ihre Funktionsweise erkl\u00e4ren: Definition : Ein Array in C# ist eine Sammlung von Elementen, die denselben Datentyp haben und \u00fcber einen Index zug\u00e4nglich sind. Deklaration : In C# wird ein Array mit der Syntax Datentyp[] ArrayName deklariert, z.B. int[] myArray; . Initialisierung : Arrays in C# k\u00f6nnen bei der Erstellung initialisiert werden, indem man ihnen eine Liste von Werten zuweist oder die Gr\u00f6\u00dfe angibt. Beispiele: int[] myArray = new int[5]; oder int[] myArray = {1, 2, 3, 4, 5}; . Index : Jedes Element im Array hat einen eindeutigen Index, der seine Position innerhalb des Arrays angibt. Indices sind typischerweise ganze Zahlen, die bei 0 beginnen. Speicherung : Arrays in C# speichern ihre Elemente in aufeinanderfolgenden Speicheradressen , was sie effizient f\u00fcr den Zugriff auf Elemente anhand ihres Indexes macht. Also um bei einem int-Array der L\u00e4nge 5 int[] test = new int[4] auf den Index 3 zuzugreifen wird die Speicheradresse des ersten Elements 0 plus den Index mal der L\u00e4nge des Datentyps (bei int 4 bytes ) gerechnet. Nehmen wir an Index 0 liegt an der \"Speicheradresse\" 8 dann liegt Index 3 bei 8+(3*4) also 20 . Feste Gr\u00f6\u00dfe : Die Gr\u00f6\u00dfe eines Arrays in C# ist festgelegt und kann nach der Erstellung nicht ge\u00e4ndert werden. Um die Gr\u00f6\u00dfe eines Arrays zu \u00e4ndern, muss man normalerweise ein neues Array erstellen und die Elemente kopieren. Zugriff : Elemente eines Arrays in C# k\u00f6nnen \u00fcber ihren Index abgerufen oder ge\u00e4ndert werden. Schleifen : Arrays in C# k\u00f6nnen mit Schleifen durchlaufen werden, um auf ihre Elemente zuzugreifen oder sie zu bearbeiten. H\u00e4ufig verwendete Schleifen sind for , foreach und while -Schleifen. Mehrdimensionale Arrays : Arrays in C# k\u00f6nnen mehrere Dimensionen haben, wie z.B. 2D- oder 3D-Arrays. Mehrdimensionale Arrays sind im Grunde genommen Arrays von Arrays. Beispiele: int[,] my2DArray = new int[3, 4]; oder int[,,] my3DArray = new int[3, 4, 5]; . Jagged Arrays : C# unterst\u00fctzt auch unregelm\u00e4\u00dfige Arrays (jagged arrays), die Arrays von Arrays sind, wobei jedes innere Array eine unterschiedliche L\u00e4nge haben kann. Beispiel: int[][] myJaggedArray = new int[3][]; . Anwendungsbereiche : Arrays in C# sind in vielen Bereichen der Programmierung und Informatik n\u00fctzlich, z.B. bei der Speicherung von Daten, der Durchf\u00fchrung von Berechnungen und der Implementierung von Algorithmen. Alternative Datenstrukturen : Arrays sind in C# nicht immer die beste Wahl f\u00fcr bestimmte Aufgaben. Andere Datenstrukturen wie List<T> , HashSet<T> oder Dictionary<TKey, TValue> k\u00f6nnen in bestimmten Situationen besser geeignet sein. Erstellen eines Arrays Ein Array wird erstellt, indem man den Typ der Elemente, gefolgt von eckigen Klammern [] und dann den Array-Namen angibt. Du musst auch die Gr\u00f6\u00dfe des Arrays bei der Erstellung festlegen. Beispiel: int[] zahlen = new int[5]; Aufgabe: Erstellen eines String-Arrays Erstelle ein String-Array mit dem Namen namen und einer Gr\u00f6\u00dfe von 3. L\u00f6sung string[] namen = new string[3]; F\u00fcllen eines Arrays Du kannst einem Array Werte zuweisen, indem du den Index verwendest. Beispiel: zahlen[0] = 1; zahlen[1] = 2; zahlen[2] = 3; zahlen[3] = 4; zahlen[4] = 5; Aufgabe: F\u00fcllen eines String-Arrays F\u00fclle das namen -Array mit den Werten \"Max\", \"Mia\" und \"Tom\". L\u00f6sung namen[0] = \"Max\"; namen[1] = \"Mia\"; namen[2] = \"Tom\"; Zugreifen auf Elemente eines Arrays Um auf die Werte eines Arrays zuzugreifen, verwende den Index. Beispiel: int zweiteZahl = zahlen[1]; Aufgabe: Zugreifen auf ein Element eines String-Arrays Greife auf das zweite Element des namen -Arrays zu und speichere es in einer Variablen namens zweiterName . L\u00f6sung string zweiterName = namen[1]; Die .Length -Eigenschaft Die .Length -Eigenschaft gibt die Anzahl der Elemente in einem Array zur\u00fcck. Beachte, dass der h\u00f6chste Index immer um eins kleiner ist als die .Length , da die Indizierung bei 0 beginnt. Beispiel: int[] zahlen = new int[6]; int arrayLength = zahlen.Length; // arrayLength ist 6 int hoechsterIndex = arrayLength - 1; // hoechsterIndex ist 5 Frage: Was ist der h\u00f6chste Index eines Arrays mit der L\u00e4nge 10? Antwort Der h\u00f6chste Index eines Arrays mit der L\u00e4nge 10 ist 9, da die Indizierung bei 0 beginnt. Iterieren \u00fcber ein Array Um \u00fcber die Elemente eines Arrays zu iterieren, verwende eine for -Schleife oder eine foreach -Schleife. Beispiel: for (int i = 0; i < zahlen.Length; i++) { Console.WriteLine(zahlen[i]); } foreach (int zahl in zahlen) { Console.WriteLine(zahl); } Aufgabe: Iterieren \u00fcber ein String-Array Iteriere \u00fcber das namen -Array und gib jeden Namen aus. L\u00f6sung for (int i = 0; i < namen.Length; i++) { Console.WriteLine(namen[i]); } foreach (string name in namen) { Console.WriteLine(name); } Negativer Index In C# ist es nicht erlaubt, auf einen negativen Index zuzugreifen. Wenn du dies versuchst, wird eine IndexOutOfRangeException ausgel\u00f6st. Frage: Was passiert, wenn du auf einen negativen Index zugreifst, z.B. array[-1] ? Antwort Wenn du auf einen negativen Index zugreifst, wird eine `IndexOutOfRangeException` ausgel\u00f6st, da negative Indizes in C# nicht erlaubt sind. Aufgaben Array-Basics Pfad im Google Drive: C#/Aufgaben/Array/Basics Direktlink zum Drive Ordner: Link Aufgabe using System; class ArrayBasics { static void Main() { // Aufgabe 1: Deklariere ein leeres eindimensionales Array mit einer Gr\u00f6\u00dfe von 3. // Hinweis: Verwende die Schreibweise \"int[]\" und \"new int[3]\". // Aufgabe 2: F\u00fclle das Array aus Aufgabe 1 mit den Zahlen 1, 2 und 3. // Hinweis: Setze die Werte an den entsprechenden Positionen des Arrays. // Aufgabe 3: Deklariere und initialisiere ein neues eindimensionales Array mit den Zahlen 4, 5 und 6. // Hinweis: Verwende die Schreibweise \"new int[] {...}\". // Aufgabe 4: Gib das zweite Element des ersten Arrays aus. // Hinweis: Denke daran, dass Arrays bei 0 anfangen zu z\u00e4hlen. // Aufgabe 5: \u00c4ndere das dritte Element des zweiten Arrays auf 7. // Hinweis: Setze den Wert an der entsprechenden Position des Arrays. // Aufgabe 6: Gib alle Elemente des ersten Arrays in umgekehrter Reihenfolge aus. // Hinweis: Verwende eine for-Schleife und starte am Ende des Arrays. // Aufgabe 7: Schreibe eine Methode, die die Summe der Elemente eines eindimensionalen Arrays berechnet und zur\u00fcckgibt. // Hinweis: Verwende eine for-Schleife und eine Variable zum Speichern der Summe. } // Implementiere die Methode f\u00fcr Aufgabe 7 hier. } L\u00f6sung using System; class ArrayBasics { static void Main() { // Aufgabe 1: Deklariere ein leeres eindimensionales Array mit einer Gr\u00f6\u00dfe von 3. int[] array1 = new int[3]; Console.Write(\"Aufgabe 1: Leeres Array: \"); PrintArray(array1); Console.WriteLine(); // Aufgabe 2: F\u00fclle das Array mit den Zahlen 1, 2 und 3. array1[0] = 1; array1[1] = 2; array1[2] = 3; Console.Write(\"Aufgabe 2: Array mit Zahlen 1, 2 und 3: \"); PrintArray(array1); Console.WriteLine(); // Aufgabe 3: Deklariere und initialisiere ein eindimensionales Array mit den Zahlen 4, 5 und 6. int[] array2 = new int[] { 4, 5, 6 }; Console.Write(\"Aufgabe 3: Array mit Zahlen 4, 5 und 6: \"); PrintArray(array2); Console.WriteLine(); // Aufgabe 4: Gib das zweite Element des ersten Arrays aus. Console.WriteLine(\"Aufgabe 4: Zweites Element des ersten Arrays: \" + array1[1]); // Aufgabe 5: \u00c4ndere das dritte Element des zweiten Arrays auf 7. array2[2] = 7; Console.Write(\"Aufgabe 5: Zweites Array nach \u00c4nderung des dritten Elements: \"); PrintArray(array2); Console.WriteLine(); // Aufgabe 6: Gib alle Elemente des ersten Arrays in umgekehrter Reihenfolge aus. Console.Write(\"Aufgabe 6: Elemente des ersten Arrays in umgekehrter Reihenfolge: \"); for (int i = array1.Length - 1; i >= 0; i--) { Console.Write(array1[i] + \" \"); } Console.WriteLine(); // Aufgabe 7: Berechne die Summe der Elemente des zweiten Arrays. int sum = CalculateSum(array2); Console.WriteLine(\"Aufgabe 7: Summe der Elemente des zweiten Arrays: \" + sum); } // Hilfsmethode zum Ausgeben eines Arrays. static void PrintArray(int[] array) { for (int i = 0; i < array.Length; i++) { Console.Write(array[i] + \" \"); } } // Methode zur Berechnung der Summe eines Arrays. static int CalculateSum(int[] array) { int sum = 0; for (int i = 0; i < array.Length; i++) { sum += array[i]; } return sum; } }","title":"C#-Nachschlagewerk"},{"location":"#c-nachschlagewerk","text":"","title":"C#-Nachschlagewerk"},{"location":"#theorie","text":"","title":"Theorie"},{"location":"#arrays-in-c","text":"Arrays sind Sammlungen von Elementen eines bestimmten Typs, die \u00fcber einen Index abgerufen werden k\u00f6nnen. \u00dcbungsaufgabe","title":"Arrays in C"},{"location":"#allgemein","text":"Arrays sind grundlegende Datenstrukturen in C# und dienen zur Speicherung von Sammlungen von Elementen. Hier sind einige ausf\u00fchrliche Stichpunkte, die das Konzept von Arrays in C# und ihre Funktionsweise erkl\u00e4ren: Definition : Ein Array in C# ist eine Sammlung von Elementen, die denselben Datentyp haben und \u00fcber einen Index zug\u00e4nglich sind. Deklaration : In C# wird ein Array mit der Syntax Datentyp[] ArrayName deklariert, z.B. int[] myArray; . Initialisierung : Arrays in C# k\u00f6nnen bei der Erstellung initialisiert werden, indem man ihnen eine Liste von Werten zuweist oder die Gr\u00f6\u00dfe angibt. Beispiele: int[] myArray = new int[5]; oder int[] myArray = {1, 2, 3, 4, 5}; . Index : Jedes Element im Array hat einen eindeutigen Index, der seine Position innerhalb des Arrays angibt. Indices sind typischerweise ganze Zahlen, die bei 0 beginnen. Speicherung : Arrays in C# speichern ihre Elemente in aufeinanderfolgenden Speicheradressen , was sie effizient f\u00fcr den Zugriff auf Elemente anhand ihres Indexes macht. Also um bei einem int-Array der L\u00e4nge 5 int[] test = new int[4] auf den Index 3 zuzugreifen wird die Speicheradresse des ersten Elements 0 plus den Index mal der L\u00e4nge des Datentyps (bei int 4 bytes ) gerechnet. Nehmen wir an Index 0 liegt an der \"Speicheradresse\" 8 dann liegt Index 3 bei 8+(3*4) also 20 . Feste Gr\u00f6\u00dfe : Die Gr\u00f6\u00dfe eines Arrays in C# ist festgelegt und kann nach der Erstellung nicht ge\u00e4ndert werden. Um die Gr\u00f6\u00dfe eines Arrays zu \u00e4ndern, muss man normalerweise ein neues Array erstellen und die Elemente kopieren. Zugriff : Elemente eines Arrays in C# k\u00f6nnen \u00fcber ihren Index abgerufen oder ge\u00e4ndert werden. Schleifen : Arrays in C# k\u00f6nnen mit Schleifen durchlaufen werden, um auf ihre Elemente zuzugreifen oder sie zu bearbeiten. H\u00e4ufig verwendete Schleifen sind for , foreach und while -Schleifen. Mehrdimensionale Arrays : Arrays in C# k\u00f6nnen mehrere Dimensionen haben, wie z.B. 2D- oder 3D-Arrays. Mehrdimensionale Arrays sind im Grunde genommen Arrays von Arrays. Beispiele: int[,] my2DArray = new int[3, 4]; oder int[,,] my3DArray = new int[3, 4, 5]; . Jagged Arrays : C# unterst\u00fctzt auch unregelm\u00e4\u00dfige Arrays (jagged arrays), die Arrays von Arrays sind, wobei jedes innere Array eine unterschiedliche L\u00e4nge haben kann. Beispiel: int[][] myJaggedArray = new int[3][]; . Anwendungsbereiche : Arrays in C# sind in vielen Bereichen der Programmierung und Informatik n\u00fctzlich, z.B. bei der Speicherung von Daten, der Durchf\u00fchrung von Berechnungen und der Implementierung von Algorithmen. Alternative Datenstrukturen : Arrays sind in C# nicht immer die beste Wahl f\u00fcr bestimmte Aufgaben. Andere Datenstrukturen wie List<T> , HashSet<T> oder Dictionary<TKey, TValue> k\u00f6nnen in bestimmten Situationen besser geeignet sein.","title":"Allgemein"},{"location":"#erstellen-eines-arrays","text":"Ein Array wird erstellt, indem man den Typ der Elemente, gefolgt von eckigen Klammern [] und dann den Array-Namen angibt. Du musst auch die Gr\u00f6\u00dfe des Arrays bei der Erstellung festlegen. Beispiel: int[] zahlen = new int[5];","title":"Erstellen eines Arrays"},{"location":"#aufgabe-erstellen-eines-string-arrays","text":"Erstelle ein String-Array mit dem Namen namen und einer Gr\u00f6\u00dfe von 3. L\u00f6sung string[] namen = new string[3];","title":"Aufgabe: Erstellen eines String-Arrays"},{"location":"#fullen-eines-arrays","text":"Du kannst einem Array Werte zuweisen, indem du den Index verwendest. Beispiel: zahlen[0] = 1; zahlen[1] = 2; zahlen[2] = 3; zahlen[3] = 4; zahlen[4] = 5;","title":"F\u00fcllen eines Arrays"},{"location":"#aufgabe-fullen-eines-string-arrays","text":"F\u00fclle das namen -Array mit den Werten \"Max\", \"Mia\" und \"Tom\". L\u00f6sung namen[0] = \"Max\"; namen[1] = \"Mia\"; namen[2] = \"Tom\";","title":"Aufgabe: F\u00fcllen eines String-Arrays"},{"location":"#zugreifen-auf-elemente-eines-arrays","text":"Um auf die Werte eines Arrays zuzugreifen, verwende den Index. Beispiel: int zweiteZahl = zahlen[1];","title":"Zugreifen auf Elemente eines Arrays"},{"location":"#aufgabe-zugreifen-auf-ein-element-eines-string-arrays","text":"Greife auf das zweite Element des namen -Arrays zu und speichere es in einer Variablen namens zweiterName . L\u00f6sung string zweiterName = namen[1];","title":"Aufgabe: Zugreifen auf ein Element eines String-Arrays"},{"location":"#die-length-eigenschaft","text":"Die .Length -Eigenschaft gibt die Anzahl der Elemente in einem Array zur\u00fcck. Beachte, dass der h\u00f6chste Index immer um eins kleiner ist als die .Length , da die Indizierung bei 0 beginnt. Beispiel: int[] zahlen = new int[6]; int arrayLength = zahlen.Length; // arrayLength ist 6 int hoechsterIndex = arrayLength - 1; // hoechsterIndex ist 5","title":"Die .Length-Eigenschaft"},{"location":"#frage-was-ist-der-hochste-index-eines-arrays-mit-der-lange-10","text":"Antwort Der h\u00f6chste Index eines Arrays mit der L\u00e4nge 10 ist 9, da die Indizierung bei 0 beginnt.","title":"Frage: Was ist der h\u00f6chste Index eines Arrays mit der L\u00e4nge 10?"},{"location":"#iterieren-uber-ein-array","text":"Um \u00fcber die Elemente eines Arrays zu iterieren, verwende eine for -Schleife oder eine foreach -Schleife. Beispiel: for (int i = 0; i < zahlen.Length; i++) { Console.WriteLine(zahlen[i]); } foreach (int zahl in zahlen) { Console.WriteLine(zahl); }","title":"Iterieren \u00fcber ein Array"},{"location":"#aufgabe-iterieren-uber-ein-string-array","text":"Iteriere \u00fcber das namen -Array und gib jeden Namen aus. L\u00f6sung for (int i = 0; i < namen.Length; i++) { Console.WriteLine(namen[i]); } foreach (string name in namen) { Console.WriteLine(name); }","title":"Aufgabe: Iterieren \u00fcber ein String-Array"},{"location":"#negativer-index","text":"In C# ist es nicht erlaubt, auf einen negativen Index zuzugreifen. Wenn du dies versuchst, wird eine IndexOutOfRangeException ausgel\u00f6st.","title":"Negativer Index"},{"location":"#frage-was-passiert-wenn-du-auf-einen-negativen-index-zugreifst-zb-array-1","text":"Antwort Wenn du auf einen negativen Index zugreifst, wird eine `IndexOutOfRangeException` ausgel\u00f6st, da negative Indizes in C# nicht erlaubt sind.","title":"Frage: Was passiert, wenn du auf einen negativen Index zugreifst, z.B. array[-1]?"},{"location":"#aufgaben","text":"","title":"Aufgaben"},{"location":"#array-basics","text":"Pfad im Google Drive: C#/Aufgaben/Array/Basics Direktlink zum Drive Ordner: Link Aufgabe using System; class ArrayBasics { static void Main() { // Aufgabe 1: Deklariere ein leeres eindimensionales Array mit einer Gr\u00f6\u00dfe von 3. // Hinweis: Verwende die Schreibweise \"int[]\" und \"new int[3]\". // Aufgabe 2: F\u00fclle das Array aus Aufgabe 1 mit den Zahlen 1, 2 und 3. // Hinweis: Setze die Werte an den entsprechenden Positionen des Arrays. // Aufgabe 3: Deklariere und initialisiere ein neues eindimensionales Array mit den Zahlen 4, 5 und 6. // Hinweis: Verwende die Schreibweise \"new int[] {...}\". // Aufgabe 4: Gib das zweite Element des ersten Arrays aus. // Hinweis: Denke daran, dass Arrays bei 0 anfangen zu z\u00e4hlen. // Aufgabe 5: \u00c4ndere das dritte Element des zweiten Arrays auf 7. // Hinweis: Setze den Wert an der entsprechenden Position des Arrays. // Aufgabe 6: Gib alle Elemente des ersten Arrays in umgekehrter Reihenfolge aus. // Hinweis: Verwende eine for-Schleife und starte am Ende des Arrays. // Aufgabe 7: Schreibe eine Methode, die die Summe der Elemente eines eindimensionalen Arrays berechnet und zur\u00fcckgibt. // Hinweis: Verwende eine for-Schleife und eine Variable zum Speichern der Summe. } // Implementiere die Methode f\u00fcr Aufgabe 7 hier. } L\u00f6sung using System; class ArrayBasics { static void Main() { // Aufgabe 1: Deklariere ein leeres eindimensionales Array mit einer Gr\u00f6\u00dfe von 3. int[] array1 = new int[3]; Console.Write(\"Aufgabe 1: Leeres Array: \"); PrintArray(array1); Console.WriteLine(); // Aufgabe 2: F\u00fclle das Array mit den Zahlen 1, 2 und 3. array1[0] = 1; array1[1] = 2; array1[2] = 3; Console.Write(\"Aufgabe 2: Array mit Zahlen 1, 2 und 3: \"); PrintArray(array1); Console.WriteLine(); // Aufgabe 3: Deklariere und initialisiere ein eindimensionales Array mit den Zahlen 4, 5 und 6. int[] array2 = new int[] { 4, 5, 6 }; Console.Write(\"Aufgabe 3: Array mit Zahlen 4, 5 und 6: \"); PrintArray(array2); Console.WriteLine(); // Aufgabe 4: Gib das zweite Element des ersten Arrays aus. Console.WriteLine(\"Aufgabe 4: Zweites Element des ersten Arrays: \" + array1[1]); // Aufgabe 5: \u00c4ndere das dritte Element des zweiten Arrays auf 7. array2[2] = 7; Console.Write(\"Aufgabe 5: Zweites Array nach \u00c4nderung des dritten Elements: \"); PrintArray(array2); Console.WriteLine(); // Aufgabe 6: Gib alle Elemente des ersten Arrays in umgekehrter Reihenfolge aus. Console.Write(\"Aufgabe 6: Elemente des ersten Arrays in umgekehrter Reihenfolge: \"); for (int i = array1.Length - 1; i >= 0; i--) { Console.Write(array1[i] + \" \"); } Console.WriteLine(); // Aufgabe 7: Berechne die Summe der Elemente des zweiten Arrays. int sum = CalculateSum(array2); Console.WriteLine(\"Aufgabe 7: Summe der Elemente des zweiten Arrays: \" + sum); } // Hilfsmethode zum Ausgeben eines Arrays. static void PrintArray(int[] array) { for (int i = 0; i < array.Length; i++) { Console.Write(array[i] + \" \"); } } // Methode zur Berechnung der Summe eines Arrays. static int CalculateSum(int[] array) { int sum = 0; for (int i = 0; i < array.Length; i++) { sum += array[i]; } return sum; } }","title":"Array-Basics"}]}